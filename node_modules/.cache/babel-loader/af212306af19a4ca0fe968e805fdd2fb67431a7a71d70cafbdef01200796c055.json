{"ast":null,"code":"var _jsxFileName = \"/Users/karanbagle/Documents/project/online-note-taking-app/src/pages/Dashboard.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const [editorState, setEditorState] = useState(() => EditorState.createEmpty());\n  const [pdfFile, setPdfFile] = useState(null);\n  const handleKeyCommand = command => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      setEditorState(newState);\n      return \"handled\";\n    }\n    return \"not-handled\";\n  };\n  const handleFileChange = e => {\n    setPdfFile(e.target.files[0]);\n  };\n  const handleConvertToWord = () => {\n    if (pdfFile) {\n      // Logic to convert PDF to Word (integration with backend API)\n      console.log(\"Converting PDF to Word:\", pdfFile.name);\n    } else {\n      alert(\"Please select a PDF file to convert.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    style: {\n      textAlign: \"center\",\n      padding: \"50px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: \"PDF to Word Converter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"application/pdf\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleConvertToWord,\n        style: {\n          marginLeft: \"20px\"\n        },\n        children: \"Convert to Word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      style: {\n        marginTop: \"40px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: \"Note Editor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          border: \"1px solid #ccc\",\n          padding: \"10px\",\n          marginTop: \"10px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Editor, {\n          editorState: editorState,\n          handleKeyCommand: handleKeyCommand,\n          onChange: setEditorState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"th/NispTiGBrRjwe2IBuTgaIPy8=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["Dashboard","_s","editorState","setEditorState","useState","EditorState","createEmpty","pdfFile","setPdfFile","handleKeyCommand","command","newState","RichUtils","handleFileChange","e","target","files","handleConvertToWord","console","log","name","alert","_jsxDEV","Box","style","textAlign","padding","children","Typography","variant","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","type","accept","onChange","Button","color","onClick","marginLeft","border","Editor","_c","$RefreshReg$"],"sources":["/Users/karanbagle/Documents/project/online-note-taking-app/src/pages/Dashboard.js"],"sourcesContent":["function Dashboard() {\n  const [editorState, setEditorState] = useState(() =>\n    EditorState.createEmpty()\n  );\n  const [pdfFile, setPdfFile] = useState(null);\n\n  const handleKeyCommand = (command) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      setEditorState(newState);\n      return \"handled\";\n    }\n    return \"not-handled\";\n  };\n\n  const handleFileChange = (e) => {\n    setPdfFile(e.target.files[0]);\n  };\n\n  const handleConvertToWord = () => {\n    if (pdfFile) {\n      // Logic to convert PDF to Word (integration with backend API)\n      console.log(\"Converting PDF to Word:\", pdfFile.name);\n    } else {\n      alert(\"Please select a PDF file to convert.\");\n    }\n  };\n  return (\n    <Box style={{ textAlign: \"center\", padding: \"50px\" }}>\n      <Typography variant=\"h4\">PDF to Word Converter</Typography>\n      <Box style={{ marginTop: \"20px\" }}>\n        <input\n          type=\"file\"\n          accept=\"application/pdf\"\n          onChange={handleFileChange}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleConvertToWord}\n          style={{ marginLeft: \"20px\" }}\n        >\n          Convert to Word\n        </Button>\n      </Box>\n      <Box style={{ marginTop: \"40px\" }}>\n        <Typography variant=\"h5\">Note Editor</Typography>\n        <div\n          style={{\n            border: \"1px solid #ccc\",\n            padding: \"10px\",\n            marginTop: \"10px\",\n          }}\n        >\n          <Editor\n            editorState={editorState}\n            handleKeyCommand={handleKeyCommand}\n            onChange={setEditorState}\n          />\n        </div>\n      </Box>\n    </Box>\n  );\n}\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}